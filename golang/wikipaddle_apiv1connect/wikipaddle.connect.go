// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wikipaddle.proto

package wikipaddle_apiv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	go_wikipaddle "github.com/wikipaddle/protobuf/go-wikipaddle"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MobileName is the fully-qualified name of the Mobile service.
	MobileName = "wikipaddle_api.v1.Mobile"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MobileGetUserProcedure is the fully-qualified name of the Mobile's GetUser RPC.
	MobileGetUserProcedure = "/wikipaddle_api.v1.Mobile/GetUser"
	// MobileGetGuideProcedure is the fully-qualified name of the Mobile's GetGuide RPC.
	MobileGetGuideProcedure = "/wikipaddle_api.v1.Mobile/GetGuide"
	// MobileGetGuidesCollectionProcedure is the fully-qualified name of the Mobile's
	// GetGuidesCollection RPC.
	MobileGetGuidesCollectionProcedure = "/wikipaddle_api.v1.Mobile/GetGuidesCollection"
	// MobileGetCurrentUserProcedure is the fully-qualified name of the Mobile's GetCurrentUser RPC.
	MobileGetCurrentUserProcedure = "/wikipaddle_api.v1.Mobile/GetCurrentUser"
	// MobileGetGuideCommentsCollectionProcedure is the fully-qualified name of the Mobile's
	// GetGuideCommentsCollection RPC.
	MobileGetGuideCommentsCollectionProcedure = "/wikipaddle_api.v1.Mobile/GetGuideCommentsCollection"
	// MobileCreateGuideCommentProcedure is the fully-qualified name of the Mobile's CreateGuideComment
	// RPC.
	MobileCreateGuideCommentProcedure = "/wikipaddle_api.v1.Mobile/CreateGuideComment"
)

// MobileClient is a client for the wikipaddle_api.v1.Mobile service.
type MobileClient interface {
	GetUser(context.Context, *connect_go.Request[go_wikipaddle.UserRequest]) (*connect_go.Response[go_wikipaddle.UserResponse], error)
	GetGuide(context.Context, *connect_go.Request[go_wikipaddle.GuideRequest]) (*connect_go.Response[go_wikipaddle.GuideResponse], error)
	GetGuidesCollection(context.Context, *connect_go.Request[go_wikipaddle.GetGuidesCollectionRequest]) (*connect_go.Response[go_wikipaddle.GetGuidesCollectionResponse], error)
	GetCurrentUser(context.Context, *connect_go.Request[go_wikipaddle.GetCurrentUserRequest]) (*connect_go.Response[go_wikipaddle.UserResponse], error)
	GetGuideCommentsCollection(context.Context, *connect_go.Request[go_wikipaddle.GetGuideCommentsCollectionRequest]) (*connect_go.Response[go_wikipaddle.GetGuideCommentsCollectionResponse], error)
	CreateGuideComment(context.Context, *connect_go.Request[go_wikipaddle.CreateGuideCommentRequest]) (*connect_go.Response[go_wikipaddle.GuideComment], error)
}

// NewMobileClient constructs a client for the wikipaddle_api.v1.Mobile service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMobileClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MobileClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mobileClient{
		getUser: connect_go.NewClient[go_wikipaddle.UserRequest, go_wikipaddle.UserResponse](
			httpClient,
			baseURL+MobileGetUserProcedure,
			opts...,
		),
		getGuide: connect_go.NewClient[go_wikipaddle.GuideRequest, go_wikipaddle.GuideResponse](
			httpClient,
			baseURL+MobileGetGuideProcedure,
			opts...,
		),
		getGuidesCollection: connect_go.NewClient[go_wikipaddle.GetGuidesCollectionRequest, go_wikipaddle.GetGuidesCollectionResponse](
			httpClient,
			baseURL+MobileGetGuidesCollectionProcedure,
			opts...,
		),
		getCurrentUser: connect_go.NewClient[go_wikipaddle.GetCurrentUserRequest, go_wikipaddle.UserResponse](
			httpClient,
			baseURL+MobileGetCurrentUserProcedure,
			opts...,
		),
		getGuideCommentsCollection: connect_go.NewClient[go_wikipaddle.GetGuideCommentsCollectionRequest, go_wikipaddle.GetGuideCommentsCollectionResponse](
			httpClient,
			baseURL+MobileGetGuideCommentsCollectionProcedure,
			opts...,
		),
		createGuideComment: connect_go.NewClient[go_wikipaddle.CreateGuideCommentRequest, go_wikipaddle.GuideComment](
			httpClient,
			baseURL+MobileCreateGuideCommentProcedure,
			opts...,
		),
	}
}

// mobileClient implements MobileClient.
type mobileClient struct {
	getUser                    *connect_go.Client[go_wikipaddle.UserRequest, go_wikipaddle.UserResponse]
	getGuide                   *connect_go.Client[go_wikipaddle.GuideRequest, go_wikipaddle.GuideResponse]
	getGuidesCollection        *connect_go.Client[go_wikipaddle.GetGuidesCollectionRequest, go_wikipaddle.GetGuidesCollectionResponse]
	getCurrentUser             *connect_go.Client[go_wikipaddle.GetCurrentUserRequest, go_wikipaddle.UserResponse]
	getGuideCommentsCollection *connect_go.Client[go_wikipaddle.GetGuideCommentsCollectionRequest, go_wikipaddle.GetGuideCommentsCollectionResponse]
	createGuideComment         *connect_go.Client[go_wikipaddle.CreateGuideCommentRequest, go_wikipaddle.GuideComment]
}

// GetUser calls wikipaddle_api.v1.Mobile.GetUser.
func (c *mobileClient) GetUser(ctx context.Context, req *connect_go.Request[go_wikipaddle.UserRequest]) (*connect_go.Response[go_wikipaddle.UserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// GetGuide calls wikipaddle_api.v1.Mobile.GetGuide.
func (c *mobileClient) GetGuide(ctx context.Context, req *connect_go.Request[go_wikipaddle.GuideRequest]) (*connect_go.Response[go_wikipaddle.GuideResponse], error) {
	return c.getGuide.CallUnary(ctx, req)
}

// GetGuidesCollection calls wikipaddle_api.v1.Mobile.GetGuidesCollection.
func (c *mobileClient) GetGuidesCollection(ctx context.Context, req *connect_go.Request[go_wikipaddle.GetGuidesCollectionRequest]) (*connect_go.Response[go_wikipaddle.GetGuidesCollectionResponse], error) {
	return c.getGuidesCollection.CallUnary(ctx, req)
}

// GetCurrentUser calls wikipaddle_api.v1.Mobile.GetCurrentUser.
func (c *mobileClient) GetCurrentUser(ctx context.Context, req *connect_go.Request[go_wikipaddle.GetCurrentUserRequest]) (*connect_go.Response[go_wikipaddle.UserResponse], error) {
	return c.getCurrentUser.CallUnary(ctx, req)
}

// GetGuideCommentsCollection calls wikipaddle_api.v1.Mobile.GetGuideCommentsCollection.
func (c *mobileClient) GetGuideCommentsCollection(ctx context.Context, req *connect_go.Request[go_wikipaddle.GetGuideCommentsCollectionRequest]) (*connect_go.Response[go_wikipaddle.GetGuideCommentsCollectionResponse], error) {
	return c.getGuideCommentsCollection.CallUnary(ctx, req)
}

// CreateGuideComment calls wikipaddle_api.v1.Mobile.CreateGuideComment.
func (c *mobileClient) CreateGuideComment(ctx context.Context, req *connect_go.Request[go_wikipaddle.CreateGuideCommentRequest]) (*connect_go.Response[go_wikipaddle.GuideComment], error) {
	return c.createGuideComment.CallUnary(ctx, req)
}

// MobileHandler is an implementation of the wikipaddle_api.v1.Mobile service.
type MobileHandler interface {
	GetUser(context.Context, *connect_go.Request[go_wikipaddle.UserRequest]) (*connect_go.Response[go_wikipaddle.UserResponse], error)
	GetGuide(context.Context, *connect_go.Request[go_wikipaddle.GuideRequest]) (*connect_go.Response[go_wikipaddle.GuideResponse], error)
	GetGuidesCollection(context.Context, *connect_go.Request[go_wikipaddle.GetGuidesCollectionRequest]) (*connect_go.Response[go_wikipaddle.GetGuidesCollectionResponse], error)
	GetCurrentUser(context.Context, *connect_go.Request[go_wikipaddle.GetCurrentUserRequest]) (*connect_go.Response[go_wikipaddle.UserResponse], error)
	GetGuideCommentsCollection(context.Context, *connect_go.Request[go_wikipaddle.GetGuideCommentsCollectionRequest]) (*connect_go.Response[go_wikipaddle.GetGuideCommentsCollectionResponse], error)
	CreateGuideComment(context.Context, *connect_go.Request[go_wikipaddle.CreateGuideCommentRequest]) (*connect_go.Response[go_wikipaddle.GuideComment], error)
}

// NewMobileHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMobileHandler(svc MobileHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(MobileGetUserProcedure, connect_go.NewUnaryHandler(
		MobileGetUserProcedure,
		svc.GetUser,
		opts...,
	))
	mux.Handle(MobileGetGuideProcedure, connect_go.NewUnaryHandler(
		MobileGetGuideProcedure,
		svc.GetGuide,
		opts...,
	))
	mux.Handle(MobileGetGuidesCollectionProcedure, connect_go.NewUnaryHandler(
		MobileGetGuidesCollectionProcedure,
		svc.GetGuidesCollection,
		opts...,
	))
	mux.Handle(MobileGetCurrentUserProcedure, connect_go.NewUnaryHandler(
		MobileGetCurrentUserProcedure,
		svc.GetCurrentUser,
		opts...,
	))
	mux.Handle(MobileGetGuideCommentsCollectionProcedure, connect_go.NewUnaryHandler(
		MobileGetGuideCommentsCollectionProcedure,
		svc.GetGuideCommentsCollection,
		opts...,
	))
	mux.Handle(MobileCreateGuideCommentProcedure, connect_go.NewUnaryHandler(
		MobileCreateGuideCommentProcedure,
		svc.CreateGuideComment,
		opts...,
	))
	return "/wikipaddle_api.v1.Mobile/", mux
}

// UnimplementedMobileHandler returns CodeUnimplemented from all methods.
type UnimplementedMobileHandler struct{}

func (UnimplementedMobileHandler) GetUser(context.Context, *connect_go.Request[go_wikipaddle.UserRequest]) (*connect_go.Response[go_wikipaddle.UserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wikipaddle_api.v1.Mobile.GetUser is not implemented"))
}

func (UnimplementedMobileHandler) GetGuide(context.Context, *connect_go.Request[go_wikipaddle.GuideRequest]) (*connect_go.Response[go_wikipaddle.GuideResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wikipaddle_api.v1.Mobile.GetGuide is not implemented"))
}

func (UnimplementedMobileHandler) GetGuidesCollection(context.Context, *connect_go.Request[go_wikipaddle.GetGuidesCollectionRequest]) (*connect_go.Response[go_wikipaddle.GetGuidesCollectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wikipaddle_api.v1.Mobile.GetGuidesCollection is not implemented"))
}

func (UnimplementedMobileHandler) GetCurrentUser(context.Context, *connect_go.Request[go_wikipaddle.GetCurrentUserRequest]) (*connect_go.Response[go_wikipaddle.UserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wikipaddle_api.v1.Mobile.GetCurrentUser is not implemented"))
}

func (UnimplementedMobileHandler) GetGuideCommentsCollection(context.Context, *connect_go.Request[go_wikipaddle.GetGuideCommentsCollectionRequest]) (*connect_go.Response[go_wikipaddle.GetGuideCommentsCollectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wikipaddle_api.v1.Mobile.GetGuideCommentsCollection is not implemented"))
}

func (UnimplementedMobileHandler) CreateGuideComment(context.Context, *connect_go.Request[go_wikipaddle.CreateGuideCommentRequest]) (*connect_go.Response[go_wikipaddle.GuideComment], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wikipaddle_api.v1.Mobile.CreateGuideComment is not implemented"))
}
